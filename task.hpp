/*
 * task.hpp
 *
 * \date 14/mag/2010
 * \author Daniele De Sensi (d.desensi.software@gmail.com)
 * =========================================================================
 *  Copyright (C) 2010-2014, Daniele De Sensi (d.desensi.software@gmail.com)
 *
 *  This file is part of ffProbe.
 *
 *  ffProbe is free software: you can redistribute it and/or
 *  modify it under the terms of the Lesser GNU General Public
 *  License as published by the Free Software Foundation, either
 *  version 3 of the License, or (at your option) any later version.

 *  ffProbe is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  Lesser GNU General Public License for more details.
 *
 *  You should have received a copy of the Lesser GNU General Public
 *  License along with ffProbe.
 *  If not, see <http://www.gnu.org/licenses/>.
 *
 * =========================================================================
 *
 * This file contains the definition of the task passed by the stages of the pipeline.
 */

#ifndef TASK_HPP_
#define TASK_HPP_
#include "flow.hpp"
#include <ff/squeue.hpp>
#include <iostream>


/**
 * The task generated by the first stage of the pipeline.
 */
class Task{
private:
    uint numWorkers;    ///<Number of workers of the pipeline.
    ff::squeue<hashElement>
        **flowsToAdd,///< A list of flows to add.
        *flowsToExport;///< A list of flows to export.
    bool eof; ///< True if the eof of a .pcap file is arrived.
        /**
      * The timestamp will be taken per task instead of per packet.
      * In this way we avoid the overhead due to an huge number of call of "time(NULL)".
          * Moreover, such that the packets belonging to the same task will be captured in
      * very short time between each other (because the read is non blocking),
          * the timestamps of these packets will be equal.
          */
        time_t timestamp;
public:
    /**
     * Constructor of the task.
     * \param numWorkers Number of workers of the pipeline.
     */
    Task(uint numWorkers);

    /**
     * Denstructor of the task.
     */
    ~Task();

    /**
      * Sets the timestamp of the task.
      * \param t The timestamp.
      */
    void setTimestamp(time_t t);

    /**
      * Returns the timestamp of the task.
      * \return The timestamp of the task.
      */
    time_t getTimestamp();

    /**
     * Adds an hashElement to the list of flows to export.
     * \param h The hashElement.
     */
    void addFlowToExport(hashElement& h);

    /**
     * Returns a pointer to the list of flows to export.
     * \return A pointer to the list of flows to export.
     */
    ff::squeue<hashElement>* getFlowsToExport();

    /**
     * Returns a pointer to the list of the flows to add.
     * \return A pointer to the list of the flows to add.
     */
    ff::squeue<hashElement>* getFlowsToAdd(const int i);

    /**
     * Adds the hashElement h for the i-th worker.
     * \param h The hashElement to add.
     * \param i The worker that have to add the flow.
     */
    void setFlowToAdd(hashElement& h, const int i);

    /**Sets EOF. **/
    void setEof();

    /**Resets EOF.**/
    void resetEof();

    /**
     * Returns true if EOF of a .pcap file is arrived.
     * \return True if EOF is arrived, otherwise returns false.
     */
    bool isEof();

    /**
     * Returns the number of workers.
     * \return The number of workers.
     */
    int getNumWorkers();
};

#endif /* TASK_HPP_ */
